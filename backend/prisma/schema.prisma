// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int           @id @default(autoincrement())
  firebaseUid String        @unique @db.VarChar(128)
  email       String        @unique @db.VarChar(255)
  name        String        @db.VarChar(100)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  Incomes     Incomes[]
  Outflows    Outflows[]
  Categories  Categories[]
  Investments Investments[]
  Cryptos     Cryptos[]
  Rewards     Rewards[]

  @@map("users")
}

model Incomes {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(64)
  amount    Decimal  @db.Decimal(10, 2)
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("incomes")
}

model Outflows {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(64)
  amount     Decimal  @db.Decimal(10, 2)
  date       DateTime @default(now())
  categoryId Int
  status     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId Int
  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  category Categories @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@map("outflows")
}

model Categories {
  id        Int      @id @default(autoincrement())
  category  String   @unique @db.VarChar(64)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  outflows Outflows[]

  @@map("categories")
}

model Investments {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(64)
  investmentType String   @db.VarChar(32)
  amount         Decimal  @db.Decimal(15, 2)
  purchaseDate   DateTime @default(now())
  dueDate        DateTime
  yieldValue     Decimal  @db.Decimal(10, 4)
  yieldType      String   @db.VarChar(32)
  bank           String   @db.VarChar(64)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId Int
  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investments")
}

model Cryptos {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(64)
  amount       Decimal  @db.Decimal(10, 2)
  price        Decimal  @db.Decimal(15, 8)
  quantity     Decimal  @db.Decimal(18, 8)
  purchaseDate DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId Int
  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cryptos")
}

model Rewards {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(64)
  quantity  Decimal  @db.Decimal(10, 2)
  dueDate   DateTime
  issuer    String   @db.VarChar(64)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rewards")
}
